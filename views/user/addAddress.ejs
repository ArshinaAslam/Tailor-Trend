<%- include("../../views/partials/user/header") %>
   
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
    :root {
        --primary-color: #6366f1;
        --primary-hover:#6366f1;
        --background: #f8f9fa;
        --card-bg: #ffffff;
        --text-color: #333333;
        --border-radius: 16px;
        --input-radius: 10px;
        --box-shadow: 0 10px 25px rgba(0, 0, 0, 0.05);
    }

    body {
        background-color: var(--background);
        font-family: 'Segoe UI', -apple-system, BlinkMacSystemFont, Roboto, Oxygen, Ubuntu, sans-serif;
    }

    .container {
        max-width: 900px;
    }

    .form-container {
        background: var(--card-bg);
        border-radius: var(--border-radius);
        padding: 40px;
        box-shadow: var(--box-shadow);
        margin-top: 50px;
        margin-bottom: 50px;
    }

    h3 {
        color: var(--primary-color);
        text-align: center;
        margin-bottom: 30px;
        font-weight: 700;
        font-size: 28px;
    }

    .form-label {
        font-weight: 500;
        margin-bottom: 8px;
        color: var(--text-color);
    }

    .form-control {
        border-radius: var(--input-radius);
        border: 1px solid #e1e5eb;
        padding: 12px 16px;
        height: auto;
        font-size: 16px;
        transition: all 0.3s ease;
        background-color: #f9fafc;
    }

    .form-control:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(58, 134, 255, 0.15);
        background-color: #fff;
    }

    .btn-primary {
        background: var(--primary-color);
        border: none;
        width: 100%;
        padding: 14px;
        font-size: 18px;
        border-radius: var(--input-radius);
        font-weight: 600;
        transition: all 0.3s ease;
        margin-top: 10px;
    }

    .btn-primary:hover {
        background: var(--primary-hover);
        transform: translateY(-2px);
    }

    .text-danger {
        font-size: 14px;
        margin-top: 4px;
    }

    .row {
        margin-bottom: 20px;
    }

   
    .form-control {
        transform: translateY(0);
        transition: transform 0.3s ease, border 0.3s ease, box-shadow 0.3s ease;
    }

    .form-control:focus {
        transform: translateY(-2px);
    }

 
    .form-group {
        margin-bottom: 16px;
    }
</style>

<body>
    <div class="container">
        <div class="form-container">
            <h3>Create User Address</h3>
            <form id="addressForm" method="POST" action="/addAddress">
                <div class="row">
                    <div class="form-group col-md-6">
                        <label for="addressType" class="form-label">Address Type</label>
                        <input type="text" class="form-control" id="addressType" name="addressType" placeholder="Home, Work, etc.">
                    </div>
                    <div class="form-group col-md-6">
                        <label for="name" class="form-label">Name</label>
                        <input type="text" class="form-control" id="name" name="name" placeholder="Full Name">
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-6">
                        <label for="city" class="form-label">City</label>
                        <input type="text" class="form-control" id="city" name="city" placeholder="Your City">
                    </div>
                    <div class="form-group col-md-6">
                        <label for="landMark" class="form-label">Landmark</label>
                        <input type="text" class="form-control" id="landMark" name="landMark" placeholder="Nearby Location">
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-6">
                        <label for="state" class="form-label">State</label>
                        <input type="text" class="form-control" id="state" name="state" placeholder="Your State">
                    </div>
                    <div class="form-group col-md-6">
                        <label for="pincode" class="form-label">Pincode</label>
                        <input type="number" class="form-control" id="pincode" name="pincode" placeholder="6-digit Pincode">
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-6">
                        <label for="phone" class="form-label">Phone</label>
                        <input type="number" class="form-control" id="phone" name="phone" placeholder="10-digit Number">
                    </div>
                    <div class="form-group col-md-6">
                        <label for="altPhone" class="form-label">Alternate Phone</label>
                        <input type="number" class="form-control" id="altPhone" name="altPhone" placeholder="10-digit Number">
                    </div>
                </div>
                <button type="submit" id="submitButton" class="btn btn-primary">Submit</button>
            </form>
        </div>
    </div>

    <script>
        document.getElementById('addressForm').addEventListener('submit', function(event) {
            event.preventDefault(); 

            if (validateForm()) {
                
                Swal.fire({
                    title: 'Success',
                    text: 'Address added successfully!',
                    icon: 'success',
                    timer: 2000, 
                    showConfirmButton: false 
                }).then(() => {
                    
                    event.target.submit();
                });
            }
        });

        function validateForm() {
            let isValid = true;
            const requiredFields = ["addressType", "name", "city", "landMark", "state", "pincode", "phone", "altPhone"];

            
            requiredFields.forEach(function(field) {
                const errorElement = document.getElementById(field + '-error');
                if (errorElement) {
                    errorElement.remove();
                }
            });

           
            requiredFields.forEach(function(field) {
                const input = document.getElementById(field);
                const inputValue = input.value.trim();

                if (inputValue === "") {
                    const errorMessage = "This field is required.";
                    const errorDiv = document.createElement('div');
                    errorDiv.className = "text-danger mt-1";
                    errorDiv.textContent = errorMessage;
                    errorDiv.id = field + '-error';
                    input.parentNode.appendChild(errorDiv);
                    isValid = false;
                }
            });

            
            if (!isValid) {
                return false;
            }

           
            const namePattern = /^[A-Za-z\s]+$/;
            const name = document.getElementById('name').value.trim();
            const city = document.getElementById('city').value.trim();
            const landMark = document.getElementById('landMark').value.trim();
            const state = document.getElementById('state').value.trim();

            if ((name && !namePattern.test(name)) || 
                (city && !namePattern.test(city)) || 
                (landMark && !namePattern.test(landMark)) || 
                (state && !namePattern.test(state))) {
                Swal.fire({
                    title: 'Error',
                    text: 'Only alphabets are allowed in Name, City, Landmark, and State fields.',
                    icon: 'error'
                });
                return false;
            }

            
            const pincodePattern = /^\d{6}$/;
            const pincode = document.getElementById('pincode').value.trim();

            if (pincode && !pincodePattern.test(pincode)) {
                Swal.fire({
                    title: 'Error',
                    text: 'Pincode should be a 6-digit number.',
                    icon: 'error'
                });
                return false;
            }

            
            const phonePattern = /^\d{10}$/;
            const allSameDigitsPattern = /^(\d)\1+$/;
            const phone = document.getElementById('phone').value.trim();
            const altPhone = document.getElementById('altPhone').value.trim();

            if (phone && !phonePattern.test(phone)) {
                Swal.fire({
                    title: 'Error',
                    text: 'Phone number should be a 10-digit number.',
                    icon: 'error'
                });
                return false;
            }

            if (altPhone && !phonePattern.test(altPhone)) {
                Swal.fire({
                    title: 'Error',
                    text: 'Alternate phone number should be a 10-digit number.',
                    icon: 'error'
                });
                return false;
            }

            if (phone && allSameDigitsPattern.test(phone)) {
        Swal.fire({
            title: 'Error',
            text: 'Phone number cannot contain all the same digits.',
            icon: 'error'
        });
        return false;
    }


    if (altPhone && allSameDigitsPattern.test(altPhone)) {
        Swal.fire({
            title: 'Error',
            text: 'Alternate phone number cannot contain all the same digits.',
            icon: 'error'
        });
        return false;
    }

            if (phone && altPhone && phone === altPhone) {
                Swal.fire({
                    title: 'Error',
                    text: 'Phone number and alternate phone number should be different.',
                    icon: 'error'
                });
                return false;
            }

            return true; 
        }
    </script>
</body>

</html>
<%- include("../../views/partials/user/footer") %>