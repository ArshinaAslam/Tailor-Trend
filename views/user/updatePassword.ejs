<%- include("../../views/partials/user/header") %>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Update Password</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        :root {
            --primary-color: #6366f1;
            --secondary-color:#6366f1;
            --background-color: #f8f9fa;
            --card-bg: #ffffff;
            --text-color:#6366f1;
            --border-radius: 8px;
            --input-border: #e2e8f0;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --error-color: #f43f5e;
            --info-color: #3b82f6;
        }
        
        body {
            font-family: 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            line-height: 1.6;
            padding: 0;
            margin: 0;
        }
        
        .main-content-wrapper {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 2rem;
        }
        
        .password-container {
            width: 100%;
            max-width: 500px;
        }
        
        .row-centered {
            display: flex;
            justify-content: center;
        }
        
        .password-card {
            background-color: var(--card-bg);
            border-radius: var(--border-radius);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
            padding: 2rem;
            width: 100%;
        }
        
        .page-title {
            font-weight: 600;
            color: var(--text-color);
            margin-bottom: 1.5rem;
            text-align: center;
            font-size: 1.8rem;
        }
        
        .input-group {
            margin-bottom: 1.5rem;
            position: relative;
            display: block;
        }
        
        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--text-color);
        }
        
        .password-wrapper {
            position: relative;
            margin-top: 0.25rem;
        }
        
        .form-control {
            width: 100%;
            padding: 0.8rem 1rem;
            border: 1px solid var(--input-border);
            border-radius: var(--border-radius);
            font-size: 1rem;
            transition: all 0.3s;
        }
        
        .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(44, 62, 80, 0.2);
            outline: none;
        }
        
        .password-toggle {
            position: absolute;
            right: 12px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: #6b7280;
            transition: color 0.2s;
        }
        
        .password-toggle:hover {
            color: var(--primary-color);
        }
        
        .error-message {
            color: var(--error-color);
            font-size: 0.85rem;
            margin-top: 0.5rem;
            display: none;
        }
        
        .password-strength {
            font-size: 0.85rem;
            color: #6b7280;
            margin-top: 0.5rem;
        }
        
        .strength-bar-container {
            height: 6px;
            background-color: #e2e8f0;
            border-radius: 3px;
            margin-top: 0.5rem;
            overflow: hidden;
        }
        
        .strength-bar {
            height: 100%;
            width: 0;
            transition: width 0.3s ease, background-color 0.3s ease;
        }
        
        .btn-primary {
            background-color: var(--primary-color);
            border: none;
            padding: 0.8rem 1.5rem;
            font-weight: 500;
            border-radius: var(--border-radius);
            transition: all 0.3s;
            margin: 1rem 0;
        }
        
        .btn-primary:hover, .btn-primary:focus {
            background-color: var(--secondary-color);
            box-shadow: 0 4px 12px rgba(52, 73, 94, 0.25);
        }
        
        .back-link {
            color: var(--primary-color);
            text-decoration: none;
            font-size: 0.95rem;
            transition: all 0.3s;
            display: inline-block;
            margin-top: 1rem;
        }
        
        .back-link:hover {
            color: var(--secondary-color);
            text-decoration: none;
        }
    </style>
</head>
<body>
    <div class="main-content-wrapper">
        <div class="password-container">
            <div class="row-centered">
                <div class="password-card">
                    <div class="card-body">
                        <h3 class="page-title">Update Password</h3>
                        <form id="updatePasswordForm" method="POST" action="/updatePassword">
                            <div class="input-group">
                                <label for="currentPassword" class="form-label">Current Password</label>
                                <div class="password-wrapper">
                                    <input type="password" class="form-control" id="currentPassword" name="currentPassword" placeholder="Enter current password">
                                    <i class="password-toggle fas fa-eye-slash" data-target="currentPassword"></i>
                                </div>
                                <div class="error-message" id="currentPasswordError">This field cannot be empty</div>
                            </div>

                            <div class="input-group">
                                <label for="newPassword" class="form-label">New Password</label>
                                <div class="password-wrapper">
                                    <input type="password" class="form-control" id="newPassword" name="newPassword" placeholder="Enter new password">
                                    <i class="password-toggle fas fa-eye-slash" data-target="newPassword"></i>
                                </div>
                                <div class="error-message" id="newPasswordError">This field cannot be empty</div>
                                <div class="password-strength" id="passwordStrength">
                                    <i class="fas fa-info-circle me-2"></i>Must be 8+ chars with uppercase, lowercase, number & special character
                                </div>
                                <div class="strength-bar-container">
                                    <div class="strength-bar" id="strengthIndicator"></div>
                                </div>
                            </div>

                            <div class="input-group">
                                <label for="confirmPassword" class="form-label">Confirm Password</label>
                                <div class="password-wrapper">
                                    <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" placeholder="Confirm new password">
                                    <i class="password-toggle fas fa-eye-slash" data-target="confirmPassword"></i>
                                </div>
                                <div class="error-message" id="confirmPasswordError">This field cannot be empty</div>
                            </div>

                            <button type="submit" class="btn btn-primary w-100">Update Password</button>
                            <div class="text-center">
                                <a href="/userProfile" class="back-link"><i class="fas fa-arrow-left me-1"></i> Return to Profile</a>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
      document.getElementById('updatePasswordForm').addEventListener('submit', async function(event) {
        event.preventDefault(); 

        const currentPassword = document.getElementById('currentPassword').value.trim();
        const newPassword = document.getElementById('newPassword').value.trim();
        const confirmPassword = document.getElementById('confirmPassword').value.trim();

        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;

        let isValid = true;

        if (currentPassword === "") {
            document.getElementById('currentPasswordError').style.display = 'block';
            isValid = false;
        } else {
            document.getElementById('currentPasswordError').style.display = 'none';
        }

        if (newPassword === "") {
            document.getElementById('newPasswordError').style.display = 'block';
            isValid = false;
        } else {
            document.getElementById('newPasswordError').style.display = 'none';
        }

        if (confirmPassword === "") {
            document.getElementById('confirmPasswordError').style.display = 'block';
            isValid = false;
        } else {
            document.getElementById('confirmPasswordError').style.display = 'none';
        }

        if (!isValid) {
            return;
        }

        if (currentPassword === newPassword) {
            Swal.fire('Error', `New password can't be the same as the current password`, 'error');
            return;
        }

        if (newPassword.length < 8) {
            Swal.fire('Error', 'New password must be at least 8 characters long.', 'error');
            return;
        }

        if (!passwordRegex.test(newPassword)) {
            Swal.fire('Error', 'New password must contain at least one uppercase letter, one lowercase letter, one number, and one special character.', 'error');
            return;
        }

        if (newPassword !== confirmPassword) {
            Swal.fire('Error', 'New password and confirm password do not match.', 'error');
            return;
        }

       
        try {
            const response = await fetch('/updatePassword', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ currentPassword, newPassword })
            });

            const data = await response.json();

            if (data.success) {
                Swal.fire({
                    title: 'Success!',
                    text: data.message,
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then(() => {
                    window.location.href = "/userProfile"; 
                });
            } else {
                Swal.fire('Error', data.message, 'error');
            }
        } catch (error) {
            Swal.fire('Error', 'Something went wrong. Please try again.', 'error');
        }
      });

  
      document.querySelectorAll('.password-toggle').forEach(icon => {
        icon.addEventListener('click', function() {
            const targetId = this.getAttribute('data-target');
            const inputField = document.getElementById(targetId);
            
            if (inputField.type === 'password') {
                inputField.type = 'text';
                this.classList.remove('fa-eye-slash');
                this.classList.add('fa-eye');
            } else {
                inputField.type = 'password';
                this.classList.remove('fa-eye');
                this.classList.add('fa-eye-slash');
            }
        });
      });


      document.getElementById('newPassword').addEventListener('input', function() {
        const password = this.value;
        const strengthIndicator = document.getElementById('passwordStrength');
        const strengthBar = document.getElementById('strengthIndicator');
        
        if (password.length === 0) {
            strengthIndicator.innerHTML = "<i class='fas fa-info-circle me-2'></i>Must be 8+ chars with uppercase, lowercase, number & special character";
            strengthIndicator.style.color = "#6b7280";
            strengthBar.style.width = "0";
        } else if (password.length < 8) {
            strengthIndicator.innerHTML = "<i class='fas fa-exclamation-circle me-2'></i>Too short";
            strengthIndicator.style.color = "#f43f5e";
            strengthBar.style.width = "25%";
            strengthBar.style.backgroundColor = "#f43f5e";
        } else {
            const hasUpper = /[A-Z]/.test(password);
            const hasLower = /[a-z]/.test(password);
            const hasNumber = /\d/.test(password);
            const hasSpecial = /[@$!%*?&]/.test(password);
            
            const requirements = [hasUpper, hasLower, hasNumber, hasSpecial];
            const met = requirements.filter(Boolean).length;
            
            if (met === 4) {
                strengthIndicator.innerHTML = "<i class='fas fa-check-circle me-2'></i>Strong password";
                strengthIndicator.style.color = "#10b981";
                strengthBar.style.backgroundColor = "#10b981";
                strengthBar.style.width = "100%";
            } else if (met === 3) {
                strengthIndicator.innerHTML = "<i class='fas fa-check me-2'></i>Good password - " + getMissingRequirement(requirements);
                strengthIndicator.style.color = "#3b82f6";
                strengthBar.style.backgroundColor = "#3b82f6";
                strengthBar.style.width = "75%";
            } else if (met === 2) {
                strengthIndicator.innerHTML = "<i class='fas fa-exclamation-triangle me-2'></i>Medium password - " + getMissingRequirement(requirements);
                strengthIndicator.style.color = "#f59e0b";
                strengthBar.style.backgroundColor = "#f59e0b";
                strengthBar.style.width = "50%";
            } else {
                strengthIndicator.innerHTML = "<i class='fas fa-exclamation-circle me-2'></i>Weak password - " + getMissingRequirement(requirements);
                strengthIndicator.style.color = "#f43f5e";
                strengthBar.style.backgroundColor = "#f43f5e";
                strengthBar.style.width = "25%";
            }
        }
      });

      function getMissingRequirement(requirements) {
          const missing = [];
          if (!requirements[0]) missing.push("uppercase");
          if (!requirements[1]) missing.push("lowercase");
          if (!requirements[2]) missing.push("number");
          if (!requirements[3]) missing.push("special character");
          
          return "Add " + missing.join(", ");
      }
    </script>
</body>
</html>

<%- include("../../views/partials/user/footer") %>