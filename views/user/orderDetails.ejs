<%- include("../../views/partials/user/header") %>


<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Order Details</title>
  
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" />
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: #eef2ff;
      --secondary: #6c757d;
      --success: #10b981;
      --danger: #ef4444;
      --warning: #f59e0b;
      --info: #3b82f6;
      --dark: #1f2937;
      --light: #f9fafb;
      --body-bg: #f8fafc;
      --body-color: #334155;
      --border-color: #e2e8f0;
      --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
        0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: "Inter", sans-serif;
      background-color: var(--body-bg);
      color: var(--body-color);
      line-height: 1.6;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 20px;
    }

    .card {
      background-color: white;
      border-radius: 12px;
      box-shadow: var(--card-shadow);
      margin-bottom: 1.5rem;
      overflow: hidden;
    }

    .card-header {
      padding: 1.5rem;
      border-bottom: 1px solid var(--border-color);
    }

    .card-body {
      padding: 1.5rem;
    }

    .content-title {
      font-size: 1.5rem;
      font-weight: 600;
      color: var(--dark);
      margin-bottom: 0.5rem;
    }

    .order-id {
      color: var(--secondary);
      font-size: 0.95rem;
      margin-bottom: 1rem;
    }

    .info-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }

    .info-card {
      background-color: var(--primary-light);
      border-radius: 10px;
      padding: 1.5rem;
      transition: transform 0.3s ease;
    }

    .info-card:hover {
      transform: translateY(-5px);
    }

    .info-icon {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 42px;
      height: 42px;
      border-radius: 50%;
      background-color: white;
      margin-bottom: 1rem;
      color: var(--primary);
    }

    .info-title {
      font-size: 1rem;
      font-weight: 600;
      margin-bottom: 0.5rem;
      color: var(--dark);
    }

    .info-text {
      font-size: 0.925rem;
      color: var(--body-color);
      line-height: 1.7;
    }

    .table-responsive {
      overflow-x: auto;
    }

    table {
      width: 100%;
      border-collapse: collapse;
    }

    th {
      background-color: var(--light);
      padding: 1rem;
      text-align: left;
      font-weight: 500;
      color: var(--dark);
      border-bottom: 1px solid var(--border-color);
    }

    td {
      padding: 1rem;
      vertical-align: middle;
      border-bottom: 1px solid var(--border-color);
    }

    .product-img {
      width: 80px;
      height: 80px;
      object-fit: cover;
      border-radius: 8px;
    }

    .btn {
      display: inline-block;
      padding: 0.5rem 1rem;
      border-radius: 6px;
      font-weight: 500;
      text-align: center;
      cursor: pointer;
      transition: all 0.3s ease;
      border: none;
      font-size: 0.875rem;
      text-decoration: none;
    }

    .btn-primary {
      background-color: var(--primary);
      color: white;
    }

    .btn-primary:hover {
      background-color: #3651d4;
    }

    .badge {
      display: inline-block;
      padding: 0.35rem 0.7rem;
      border-radius: 50px;
      font-size: 0.75rem;
      font-weight: 500;
    }

    .badge-success {
      background-color: #d1fae5;
      color: #065f46;
    }

    .badge-warning {
      background-color: #fef3c7;
      color: #92400e;
    }

    .badge-danger {
      background-color: #fee2e2;
      color: #b91c1c;
    }

    .badge-info {
      background-color: #dbeafe;
      color: #1e40af;
    }

    .price {
      font-weight: 600;
      color: var(--dark);
    }

    .action-select {
      padding: 0.5rem;
      border-radius: 6px;
      border: 1px solid var(--border-color);
      background-color: white;
      width: 100%;
      max-width: 150px;
    }

    .footer {
      text-align: center;
      padding: 2rem 0;
      color: var(--secondary);
      font-size: 0.875rem;
    }

    .status-indicator {
      display: inline-block;
      width: 8px;
      height: 8px;
      border-radius: 50%;
      margin-right: 5px;
    }

    .status-confirmed {
      background-color: var(--info);
    }

    .status-shipped {
      background-color: var(--warning);
    }

    .status-delivered {
      background-color: var(--success);
    }

    .status-cancelled {
      background-color: var(--danger);
    }

    .order-summary {
      background-color: var(--light);
      padding: 1.5rem;
      border-radius: 10px;
      margin-top: 1.5rem;
    }

    .summary-item {
      display: flex;
      justify-content: space-between;
      margin-bottom: 0.75rem;
      font-size: 0.95rem;
    }

    .summary-total {
      font-weight: 600;
      font-size: 1.1rem;
      color: var(--dark);
      padding-top: 0.75rem;
      margin-top: 0.75rem;
      border-top: 1px solid var(--border-color);
    }

    .modal {
      display: flex;
      justify-content: center;
      align-items: center;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
    }

    .modal-content {
      background: white;
      padding: 20px;
      border-radius: 10px;
      text-align: center;
      width: 300px;
    }

    .close {
      float: right;
      font-size: 20px;
      cursor: pointer;
    }

    select,
    button {
      width: 100%;
      margin-top: 10px;
      padding: 8px;
    }

    @media (max-width: 768px) {
      .hide-mobile {
        display: none;
      }

      td,
      th {
        padding: 0.75rem;
      }

      .product-img {
        width: 60px;
        height: 60px;
      }
    }
    
  </style>
</head>

<body>
  <main class="container">
    <div class="card mt-4">
      <div class="card-header">
        <h2 class="content-title">Order Details</h2>
        <p class="order-id">Order ID: <%= orders.orderid %>
        </p>
        
        <div class="order-status mt-2" id="orderStatus">
          <span class="label">Current Status:</span>
          <span class="value">
            <%= orders.status %>
          </span>
        </div>
      </div>

      <div class="card-body">
        <div class="order-status-bar" style="
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    ">
  <div class="status-badge">
    <% let statusClass='' ; %>
      <% if (orders.status==='Confirmed' ) { statusClass='badge-info' ; } %>
        <% if (orders.status==='Shipped' ) { statusClass='badge-warning' ; } %>
          <% if (orders.status==='Delivered' ) { statusClass='badge-success' ; } %>
            <% if (orders.status==='Cancelled' ) { statusClass='badge-danger' ; } %>
              <% if (orders.status==='Pending Payment' ) { statusClass='badge-warning' ; } %>
                <span class="badge <%= statusClass %>">
                  <% if (orders.status==='Confirmed' ) { %><i class="fas fa-check-circle"></i>
                    <% } %>
                      <% if (orders.status==='Shipped' ) { %><i class="fas fa-truck"></i>
                        <% } %>
                          <% if (orders.status==='Delivered' ) { %><i class="fas fa-box-open"></i>
                            <% } %>
                              <% if (orders.status==='Cancelled' ) { %><i class="fas fa-times-circle"></i>
                                <% } %>
                                  <% if (orders.status==='Pending Payment' ) { %><i class="fas fa-clock"></i>
                                    <% } %>
                                      <%= orders.status %>
                </span>
  </div>

  <% if(orders.status==='Delivered' ) { %>
    <a href="/download-invoice/<%= orders.orderid %>" class="btn btn-primary">
      <i class="fas fa-download"></i> Download Invoice
    </a>
  <% } %>
  
  <!-- Add this section for Retry Payment -->
 <!-- Add this section for Retry Payment -->
<!-- <% if(orders.status === 'Pending Payment' && !orders.paymentId) { %>
  <button class="btn btn-primary" onclick="retryPayment('<%= orders._id %>', '<%= orders.finalAmount %>')">
    <i class="fas fa-sync"></i> Retry Payment
  </button>
<% } %> -->

<% if(orders.status === 'Pending Payment' && !orders.paymentId) { %>
  <button class="btn btn-primary" style="width: auto; min-width: 120px;" onclick="retryPayment('<%= orders._id %>', '<%= orders.finalAmount %>')">
    <i class="fas fa-sync"></i> Pay Now
  </button>
<% } %>
</div>

       
        <div class="info-grid">
          <!-- Customer Info -->
          <div class="info-card">
            <div class="info-icon">
              <i class="fas fa-user"></i>
            </div>
            <h3 class="info-title">Customer Information</h3>
            <div class="info-text">
              <p><strong>
                  <%= address.name %>
                </strong></p>
              <p><i class="fas fa-phone-alt"></i>
                <%= address.phone %>
              </p>
            </div>
          </div>

          <!-- Order Info -->
          <div class="info-card">
            <div class="info-icon">
              <i class="fas fa-shopping-bag"></i>
            </div>
            <h3 class="info-title">Order Information</h3>
            <div class="info-text">
              <p>
                <strong>Payment Method:</strong>
                <%= orders.paymentMethod %>
              </p>
              <div class="summary-item">
                <span>Total Price:</span>
                <span class="price">₹<%= orders.totalPrice.toLocaleString() %></span>
              </div>
              <div class="summary-item">
                <span>Discount:</span>
                <span class="price">₹<%= orders.discount.toLocaleString() %></span>
              </div>
              <div class="summary-item summary-total">
                <span>Final Amount:</span>
                <span id="finalAmount" class="price">₹<%= orders.finalAmount.toLocaleString() %></span>
              </div>
            </div>
          </div>

          <!-- Delivery Info -->
          <div class="info-card">
            <div class="info-icon">
              <i class="fas fa-map-marker-alt"></i>
            </div>
            <h3 class="info-title">Delivery Address</h3>
            <div class="info-text">
              <% if (address) { %>
                <p>
                  <%= address.landMark %>, <%= address.city %>
                </p>
                <p>
                  <%= address.state %>
                </p>
                <p>
                  <strong>
                    <%= address.addressType %>
                  </strong> - <%= address.pincode %>
                </p>
                <% } else { %>
                  <p class="text-danger">Address not available</p>
                  <% } %>
            </div>
          </div>
        </div>

        <!-- Order Items -->
        <h3 class="info-title" style="margin: 1.5rem 0">Order Items</h3>
        <div class="table-responsive">
          <table>
            <thead>
              <tr>
                <th width="15%">ProductId</th>
                <th>Image</th>
                <th width="30%">Name</th>
                <th>size</th>
                <th width="15%">Unit Price</th>
                <th width="10%">Quantity</th>
                <th width="15%">Total</th>
                <th width="15%">Status</th>
              </tr>
            </thead>
            <tbody>
              <% if (locals.orders) { %>
                <% for (let i=0; i < orders.orderitems.length; i++) { %>
                  <tr>
                    <td>
                      <%= orders.orderitems[i].productId._id %>
                    </td>
                    <td>
                     

                        <img src="/uploads/product-images/<%= orders.orderitems[i].productId.productImage[0] %>"
                                style="width: 80px; height: 80px; object-fit: cover; border-radius: 5px;" />
                      
                    </td>
                    <td>
                      
                        <strong><%= orders.orderitems[i].productId.productName %></strong>
                        
                    
                    

                    </td>
                    <td>
                       <%= orders.orderitems[i].size %>

                    </td>
                    <td class="price">
                      ₹<%= orders.orderitems[i].price.toLocaleString() %>
                    </td>
                    <td>
                      <%= orders.orderitems[i].quantity %>
                    </td>
                    <td class="price">
                      ₹<%= (parseInt(orders.orderitems[i].price) *
                        parseInt(orders.orderitems[i].quantity)).toLocaleString() %>
                    </td>
                    <td>
                      <% if (orders.orderitems[i].status==="Cancelled" ) { %>
                        <span class="badge badge-danger"><i class="fas fa-times-circle"></i> Cancelled</span>
                        <% }else if (orders.orderitems[i].status==="Return requested" ) { %>
                          <span class="badge badge-danger"><i class="fas fa-times-circle"></i> Return requested</span>
                          <% }else { %>
                          <% if (orders.orderitems[i].status==="Pending" ) { %>
                            <select class="action-select" onchange="handleDropdownChange(this,'<%= orders.orderitems[i]._id %>','<%= orders.orderitems[i].size %>')">
                              <option value="" disabled selected>Actions</option>
                              <option value="cancel">Cancel Order</option>
                            </select>
                            <% } else if ( orders.orderitems[i].status==="Shipped" || orders.orderitems[i].status==="Delivered" ) { %>
                              <select class="action-select" onchange="handleDropdownChange(this, '<%= orders.orderitems[i]._id %>', '<%= orders.orderitems[i].size %>')">
                                <option value="" disabled selected>Actions</option>
                                <option value="returnrequest">Return Order</option>
                              </select>
                              <%} else if(orders.orderitems[i].status =="Returned"){%>  
                                <span class="badge badge-info"><i class="fas fa-clock"></i> Returned</span>
                              <% } else if(orders.orderitems[i].status =="Return requested"){%>  
                                <span class="badge badge-info"><i class="fas fa-clock"></i> Return Requested</span>
                              <% }else { %>
                                <span class="badge badge-info"><i class="fas fa-clock"></i> Pending</span>
                                <% } %>
                                  <% } %>
                    </td>
                  </tr>
                  <% } %>
                    <% } %>
            </tbody>
          </table>
          <input type="hidden" id="orderId" value="<%= orders._id %>" />
        </div>
      </div>
    </div>

    <div id="returnModal" class="modal" style="display: none">
      <div class="modal-content">
        <span class="close" onclick="closeModal()">&times;</span>
        <h2>Return Order</h2>
        <p>Please select a reason for returning this order:</p>
        <select id="returnReason">
          <option value="" disabled selected>Select a reason</option>
          <option value="Received Wrong Product">
            Received Wrong Product
          </option>
          <option value="Product Damaged">Product Damaged</option>
          <option value="Not as Described">Not as Described</option>
          <option value="Changed My Mind">Changed My Mind</option>
        </select>
        <button onclick="submitReturnRequest()">Submit</button>
      </div>
    </div>
  </main>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

  <script>

async function retryPayment(orderId, amount) {
    try {
      Swal.fire({
        title: 'Processing',
        text: 'Preparing payment gateway...',
        allowOutsideClick: false,
        didOpen: () => { Swal.showLoading(); }
      });
      
      const response = await fetch('/create-razorpay-order', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          amount: amount * 100, 
          currency: 'INR',
          orderId: orderId 
        })
      });
      
      const orderData = await response.json();
      Swal.close();
      
      if (!orderData.success) {
        throw new Error(orderData.message || 'Failed to create payment order');
      }
      
      const options = {
        key: orderData.key_id,
        amount: orderData.amount,
        currency: 'INR',
        name: 'TAILOR TREND',
        description: 'Order Payment Retry',
        order_id: orderData.order_id,
        handler: async function(response) {
          Swal.fire({ 
            title: 'Verifying Payment', 
            text: 'Please wait...', 
            allowOutsideClick: false, 
            didOpen: () => { Swal.showLoading(); } 
          });
          
          const verificationResponse = await fetch('/verify-payment', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              payment_id: response.razorpay_payment_id,
              order_id: response.razorpay_order_id,
              signature: response.razorpay_signature,
              mongoOrderId: orderId
            })
          });
          
          const verificationResult = await verificationResponse.json();
          
          if (verificationResult.success) {
            Swal.fire({ 
              title: 'Payment Successful!', 
              text: 'Your order is confirmed.', 
              icon: 'success', 
              confirmButtonColor: '#4361ee' 
            })
            .then(() => window.location.href = '/orderConfirm');

            const retryButton = document.querySelector('[onclick^="retryPayment"]');
  if (retryButton) {
    retryButton.style.display = 'none';
  }
          } else {
            Swal.fire({ 
              title: 'Payment Failed', 
              text: verificationResult.message, 
              icon: 'error', 
              confirmButtonColor: '#4361ee' 
            });
          }
        },
        prefill: {
          name: '<%= user.name %>',
          email: '<%= user.email %>',
          contact: '<%= user.phone %>'
        },
        theme: { color: '#4361ee' }
      };
      
      const rzp = new Razorpay(options);
      rzp.open();
    } catch (error) {
      Swal.fire({ 
        title: 'Error', 
        text: error.message || 'An error occurred while retrying payment.', 
        icon: 'error', 
        confirmButtonColor: '#4361ee' 
      });
    }
  }
 

    // function refreshStatus() {
    //   const orderId = '<%= orders._id %>'; 
    //   fetch(`/orders/status/${orderId}`)
    //     .then(response => response.json())
    //     .then(data => {
    //       const statusElement = document.getElementById('orderStatus');
    //       if (data.status && data.status !== statusElement.textContent) {
           
    //         statusElement.querySelector('.value').textContent = data.status;

            
    //         Swal.fire({
    //           icon: 'info',
    //           title: 'Status Updated',
    //           text: `Order status changed to: ${data.status}`,
    //           timer: 3000,
    //           showConfirmButton: false
    //         });

            
    //         if (['Delivered', 'Cancelled'].includes(data.status)) {
    //           setTimeout(() => window.location.reload(), 3000);
    //         }
    //       }
    //     })
    //     .catch(error => console.error('Error fetching status:', error));
    // }

    
    // document.addEventListener('DOMContentLoaded', () => {
    //   setInterval(refreshStatus, 30000); 
    // });

    function handleDropdownChange(selectElement,productId,size) {
      var selectedValue = selectElement.value;
      var orderId = document.getElementById("orderId").value;
      const finalAmountText = document.getElementById("finalAmount").textContent;
      const finalAmount = parseFloat(finalAmountText.replace(/[^0-9.]/g, ''));

     
     

      if (selectedValue === "cancel") {

       
        
        confirmCancelOrder(orderId, productId, size,finalAmount);
      } else if (selectedValue == "returnrequest") {
        returnRequestOrder(orderId,productId,size);
      }
    }

    function confirmCancelOrder(orderId, productId, size,finalAmount) {
      Swal.fire({
        title: 'Cancel Your Order?',
        text: 'Are you sure you want to cancel this order?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#ef4444',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No, keep it',
        reverseButtons: true,
       
      }).then((result) => {
        if (result.isConfirmed) {
          cancelOrder(orderId, productId, size,finalAmount);
        }
      });
    }


    function cancelOrder(orderId, productId, size, finalAmount) {
  $.ajax({
    url: '/cancelOrder',
    method: 'POST',
    contentType: 'application/json',
    data: JSON.stringify({ orderId, productId, size, finalAmount }),
    success: (response) => {
      if (response.success) {
        let message = '';
        
        
        if (response.paymentMethod === "COD") {
          message = "Your order has been cancelled successfully.";
        } else {
          message = `Your order has been cancelled successfully. Refunded: ₹${response.refundAmount.toFixed(2)}`;
        }
        
        Swal.fire({
          title: 'Cancelled!',
          text: message,
          icon: 'success',
          confirmButtonColor: '#4361ee'
        }).then(() => {
          window.location.reload();
        });
      }
    },
    error: (error) => {
      Swal.fire({
        title: 'Error!',
        text: 'Something went wrong while cancelling your order.',
        icon: 'error',
        confirmButtonColor: '#4361ee'
      });
    }
  });
}
    let selectedOrderId = '';
    let selectedProductId = ''; 
    let selectedSize = '';     

    function returnRequestOrder(orderId,productId,size) {
      selectedOrderId = orderId;
      selectedProductId=productId
      selectedSize=size
      document.getElementById('returnModal').style.display = 'flex';
    }

    function closeModal() {
      document.getElementById('returnModal').style.display = 'none';
    }




    function submitReturnRequest() {
  const returnReason = document.getElementById('returnReason').value;
  if (!returnReason) {
    Swal.fire({
      title: 'Error!',
      text: 'Please select a return reason.',
      icon: 'warning',
      confirmButtonColor: '#f59e0b'
    });
    return;
  }

  console.log('Submitting return request:', { orderId: selectedOrderId, returnReason,  productId:selectedProductId ,size:selectedSize});

  $.ajax({
    url: '/returnOrder',
    method: 'POST',
    contentType: 'application/json',
    data: JSON.stringify({ orderId: selectedOrderId, returnReason: returnReason,productId:selectedProductId,size:selectedSize }),
    success: (response) => {
      console.log('Return request success:', response);
      Swal.fire({
        title: 'Return Requested!',
        text: 'Your return request has been submitted successfully.',
        icon: 'success',
        confirmButtonColor: '#4361ee'
      }).then(() => {
        window.location.reload();
      });
    },
    error: (xhr, status, error) => {
      console.error('Return request failed:', {
        status: status,
        statusCode: xhr.status,
        responseText: xhr.responseText,
        error: error
      });
      Swal.fire({
        title: 'Error!',
        text: xhr.responseJSON?.message || 'Something went wrong while requesting your return.',
        icon: 'error',
        confirmButtonColor: '#4361ee'
      });
    }
  });

  closeModal();
}
  </script>
</body>

</html>


<%- include("../../views/partials/user/footer") %>
