<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit User Address</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        body {
            background-color: #f8f9fa;
        }

        .container {
            max-width: 800px;
        }

        .form-container {
            background: #fff;
            border-radius: 12px;
            padding: 30px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        }

        h3 {
            color: #046963;
            text-align: center;
            margin-bottom: 30px;
        }

        .form-control {
            border-radius: 8px;
            border: 2px solid #ced4da;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            border-color: #046963;
            box-shadow: 0px 0px 6px rgba(4, 105, 99, 0.4);
        }

        .btn-primary {
            background: #046963;
            border: none;
            width: 100%;
            padding: 12px;
            font-size: 18px;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            background: #034f4a;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <div class="form-container">
            <h3>Edit User Address</h3>
            <form id="addressForm" method="POST" action="/editAddress?id=<%=address._id%>">
                <div class="row mb-3">
                    <div class="form-group col-md-6">
                        <label for="addressType">Address Type</label>
                        <input type="text" class="form-control" id="addressType" name="addressType" value="<%= address.addressType %>">
                    </div>
                    <div class="form-group col-md-6">
                        <label for="name">Name</label>
                        <input type="text" class="form-control" id="name" name="name" value="<%= address.name %>" >
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="form-group col-md-6">
                        <label for="city">City</label>
                        <input type="text" class="form-control" id="city" name="city" value="<%= address.city %>">
                    </div>
                    <div class="form-group col-md-6">
                        <label for="landMark">Landmark</label>
                        <input type="text" class="form-control" id="landMark" name="landMark" value="<%= address.landMark%>">
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="form-group col-md-6">
                        <label for="state">State</label>
                        <input type="text" class="form-control" id="state" name="state" value="<%= address.state %>" >
                    </div>
                    <div class="form-group col-md-6">
                        <label for="pincode">Pincode</label>
                        <input type="number" class="form-control" id="pincode" name="pincode" value="<%= address.pincode %>" >
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="form-group col-md-6">
                        <label for="phone">Phone</label>
                        <input type="number" class="form-control" id="phone" name="phone" value="<%= address.phone %>">
                    </div>
                    <div class="form-group col-md-6">
                        <label for="altPhone">Alternate Phone</label>
                        <input type="number" class="form-control" id="altPhone" name="altPhone" value="<%= address.altPhone %>">
                    </div>
                </div>
                <button type="submit" id="submitButton" class="btn btn-primary">Submit</button>
            </form>
        </div>
    </div>


<script>
document.getElementById('addressForm').addEventListener('submit', function (event) {
    event.preventDefault(); // Prevent the default form submission

    if (validateForm()) {
        // Convert form data to JSON
        const formData = new FormData(this);
        const data = {};
        formData.forEach((value, key) => {
            data[key] = value;
        });

        // Submit the form via fetch
        fetch(this.action, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json', // Send as JSON
            },
            body: JSON.stringify(data), // Convert data to JSON
        })
            .then(response => {
                if (response.ok) {
                    // Show success message
                    Swal.fire({
                        title: 'Success',
                        text: 'Address updated successfully',
                        icon: 'success',
                        timer: 2000, // Show for 2 seconds
                        showConfirmButton: false,
                    }).then(() => {
                        // Redirect after the Swal message is closed
                        window.location.href = '/userProfile';
                    });
                } else {
                    // Handle errors
                    Swal.fire({
                        title: 'Error',
                        text: 'Failed to update address',
                        icon: 'error',
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error',
                    text: 'An error occurred while updating the address',
                    icon: 'error',
                });
            });
    }
});

function validateForm() {
    let isValid = true;
    const requiredFields = ["addressType", "name", "city", "landMark", "state", "pincode", "phone", "altPhone"];

    // Clear all existing error messages
    requiredFields.forEach(function (field) {
        const errorElement = document.getElementById(field + '-error');
        if (errorElement) {
            errorElement.remove();
        }
    });

    // Validate required fields
    requiredFields.forEach(function (field) {
        const input = document.getElementById(field);
        const inputValue = input.value.trim();

        if (inputValue === "") {
            const errorMessage = "This field is required.";
            const errorDiv = document.createElement('div');
            errorDiv.className = "text-danger mt-1";
            errorDiv.textContent = errorMessage;
            errorDiv.id = field + '-error';
            input.parentNode.appendChild(errorDiv);
            isValid = false;
        }
    });

    if (!isValid) {
        return isValid;
    }

    // Validate name, city, landmark, and state (alphabets only)
    const namePattern = /^[A-Za-z\s]+$/;
    const name = document.getElementById('name').value.trim();
    const city = document.getElementById('city').value.trim();
    const landMark = document.getElementById('landMark').value.trim();
    const state = document.getElementById('state').value.trim();

    if ((name && !namePattern.test(name)) ||
        (city && !namePattern.test(city)) ||
        (landMark && !namePattern.test(landMark)) ||
        (state && !namePattern.test(state))) {
        Swal.fire({
            title: 'Error',
            text: 'Only alphabets are allowed in Name, City, Landmark, and State fields.',
            icon: 'error'
        });
        isValid = false;
    }

    // Validate pincode (6 digits)
    const pincodePattern = /^\d{6}$/;
    const pincode = document.getElementById('pincode').value.trim();

    if (pincode && !pincodePattern.test(pincode)) {
        Swal.fire({
            title: 'Error',
            text: 'Pincode should be a 6-digit number.',
            icon: 'error'
        });
        isValid = false;
    }

    // Validate phone and alternate phone (10 digits)
    const phonePattern = /^\d{10}$/;
    const phone = document.getElementById('phone').value.trim();
    const altPhone = document.getElementById('altPhone').value.trim();

    if (phone && !phonePattern.test(phone)) {
        Swal.fire({
            title: 'Error',
            text: 'Phone number should be a 10-digit number.',
            icon: 'error'
        });
        isValid = false;
    }

    if (altPhone && !phonePattern.test(altPhone)) {
        Swal.fire({
            title: 'Error',
            text: 'Alternate phone number should be a 10-digit number.',
            icon: 'error'
        });
        isValid = false;
    }

    if (phone && altPhone && phone === altPhone) {
        Swal.fire({
            title: 'Error',
            text: 'Phone number and alternate phone number should be different.',
            icon: 'error'
        });
        isValid = false;
    }

    return isValid;
}
</script>

 


