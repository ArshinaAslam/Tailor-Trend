

<!-- <style>
  :root {
    --primary: #6366f1;
    --primary-dark: #4f46e5;
    --secondary: #ec4899;
    --dark: #1e293b;
    --light: #f1f5f9;
    --success: #10b981;
    --danger: #ef4444;
    --warning: #f59e0b;
    --gray-100: #f3f4f6;
    --gray-200: #e5e7eb;
    --gray-300: #d1d5db;
    --gray-400: #9ca3af;
    --gray-500: #6b7280;
    --border-radius: 12px;
    --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
    --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }

  body {
    font-family: 'Inter', sans-serif;
    background-color: var(--light);
    color: var(--dark);
    margin: 0;
    padding: 0;
    line-height: 1.6;
  }

  .main {
    min-height: calc(100vh - 100px);
  }

  /* Breadcrumb */
  .breadcrumb-wrap {
    background-color: transparent;
    padding: 20px 0 0;
    margin-bottom: 20px;
  }

  .breadcrumb {
    font-size: 14px;
    display: flex;
    align-items: center;
  }

  .breadcrumb a {
    color: var(--gray-500);
    text-decoration: none;
    transition: color 0.2s;
  }

  .breadcrumb a:hover {
    color: var(--primary);
  }

  .breadcrumb span {
    margin: 0 8px;
    color: var(--gray-400);
  }

  /* Dashboard Layout */
  .dashboard-container {
    display: grid;
    grid-template-columns: 280px 1fr;
    gap: 24px;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  /* Sidebar Menu */
  .dashboard-menu {
    background-color: white;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    position: sticky;
    top: 20px;
    height: fit-content;
    overflow: hidden;
  }

  .dashboard-menu ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .dashboard-menu .nav-link {
    display: flex;
    align-items: center;
    padding: 16px 20px;
    color: var(--gray-500);
    text-decoration: none;
    transition: all 0.2s;
    border-left: 3px solid transparent;
    font-weight: 500;
  }

  .dashboard-menu .nav-link i {
    margin-right: 12px;
    font-size: 18px;
    color: var(--gray-400);
    transition: color 0.2s;
  }

  .dashboard-menu .nav-link:hover {
    background-color: var(--gray-100);
    color: var(--primary);
  }

  .dashboard-menu .nav-link:hover i {
    color: var(--primary);
  }

  .dashboard-menu .nav-link.active {
    background-color: rgba(99, 102, 241, 0.1);
    color: var(--primary);
    border-left: 3px solid var(--primary);
  }

  .dashboard-menu .nav-link.active i {
    color: var(--primary);
  }

  /* Content Area */
  .content-area {
    min-width: 0;
  }

  /* Cards */
  .card {
    background-color: white;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    overflow: hidden;
    margin-bottom: 24px;
    border: none;
    transition: transform 0.3s, box-shadow 0.3s;
  }

  .card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
  }

  .card-header {
    background: linear-gradient(135deg, var(--primary), var(--primary-dark));
    color: white;
    padding: 16px 20px;
    font-weight: 600;
    border-bottom: none;
  }

  .card-body {
    padding: 24px;
  }

  /* Profile Card */
  .profile-card {
    text-align: center;
  }

  .profile-avatar {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    background-color: var(--primary);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 36px;
    font-weight: bold;
    margin: 0 auto 20px;
  }

  .profile-info h3 {
    margin-bottom: 16px;
    color: var(--dark);
  }

  .profile-info p {
    color: var(--gray-500);
    margin-bottom: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .profile-info p i {
    margin-right: 8px;
    color: var(--primary);
  }

  /* Forms */
  .form-group {
    margin-bottom: 20px;
  }

  .form-label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: var(--dark);
  }

  .form-control {
    width: 100%;
    padding: 12px 16px;
    border: 1px solid var(--gray-300);
    border-radius: var(--border-radius);
    font-size: 16px;
    transition: border-color 0.2s, box-shadow 0.2s;
  }

  .form-control:focus {
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2);
    outline: none;
  }

  /* Buttons */
  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 10px 20px;
    border-radius: var(--border-radius);
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s;
    border: none;
    text-decoration: none;
  }

  .btn-sm {
    padding: 8px 16px;
    font-size: 14px;
  }

  .btn-primary {
    background-color: var(--primary);
    color: white;
  }

  .btn-primary:hover {
    background-color: var(--primary-dark);
    transform: translateY(-2px);
  }

  .btn-success {
    background-color: var(--success);
    color: white;
  }

  .btn-success:hover {
    background-color: #0da271;
    transform: translateY(-2px);
  }

  .btn-danger {
    background-color: var(--danger);
    color: white;
  }

  .btn-danger:hover {
    background-color: #dc2626;
    transform: translateY(-2px);
  }

  .ml-2 {
    margin-left: 8px;
  }

  /* Tables */
  .table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
  }

  .table th,
  .table td {
    padding: 16px;
    text-align: left;
  }

  .table th {
    background-color: var(--gray-100);
    font-weight: 600;
    color: var(--gray-500);
    border-bottom: 1px solid var(--gray-200);
  }

  .table td {
    border-bottom: 1px solid var(--gray-200);
  }

  .table tr:last-child td {
    border-bottom: none;
  }

  .table tbody tr {
    transition: background-color 0.2s;
  }

  .table tbody tr:hover {
    background-color: var(--gray-100);
  }

  /* Pagination */
  .pagination {
    display: flex;
    list-style: none;
    padding: 0;
    margin: 20px 0 0;
    justify-content: center;
  }

  .pagination .page-item {
    margin: 0 4px;
  }

  .pagination .page-link {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    background-color: white;
    color: var(--gray-500);
    border: 1px solid var(--gray-300);
    transition: all 0.2s;
  }

  .pagination .page-item.active .page-link {
    background-color: var(--primary);
    color: white;
    border-color: var(--primary);
  }

  .pagination .page-link:hover {
    background-color: var(--gray-100);
    border-color: var(--primary);
    color: var(--primary);
  }

  .pagination .page-item.active .page-link:hover {
    background-color: var(--primary-dark);
    color: white;
  }

  /* Address Section */
  #address {
    position: relative;
  }

  /* Responsive */
  @media (max-width: 992px) {
    .dashboard-container {
      grid-template-columns: 1fr;
    }

    .dashboard-menu {
      position: static;
      margin-bottom: 24px;
    }
  }

  @media (max-width: 768px) {
    .breadcrumb-wrap {
      padding: 16px 0 0;
    }

    .card-header,
    .card-body {
      padding: 16px;
    }
  }

  @media (max-width: 576px) {
    .dashboard-container {
      padding: 0 12px;
    }
  }
</style> -->



<style>
  :root {
    --primary: #6366f1;
    --primary-dark: #4f46e5;
    --secondary: #ec4899;
    --dark: #1e293b;
    --light: #f1f5f9;
    --success: #10b981;
    --danger: #ef4444;
    --warning: #f59e0b;
    --gray-100: #f3f4f6;
    --gray-200: #e5e7eb;
    --gray-300: #d1d5db;
    --gray-400: #9ca3af;
    --gray-500: #6b7280;
    --border-radius: 12px;
    --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
    --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }

  body {
    font-family: 'Inter', sans-serif;
    background-color: var(--light);
    color: var(--dark);
    margin: 0;
    padding: 0;
    line-height: 1.6;
  }

  .main {
    min-height: calc(100vh - 100px);
  }

  /* Breadcrumb */
  .breadcrumb-wrap {
    background-color: transparent;
    padding: 20px 0 0;
    margin-bottom: 20px;
  }

  .breadcrumb {
    font-size: 14px;
    display: flex;
    align-items: center;
  }

  .breadcrumb a {
    color: var(--gray-500);
    text-decoration: none;
    transition: color 0.2s;
  }

  .breadcrumb a:hover {
    color: var(--primary);
  }

  .breadcrumb span {
    margin: 0 8px;
    color: var(--gray-400);
  }

  /* Dashboard Layout */
  .dashboard-container {
    display: grid;
    grid-template-columns: 280px 1fr;
    gap: 24px;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  /* Sidebar Menu */
  .dashboard-menu {
    background-color: white;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    position: sticky;
    top: 20px;
    height: fit-content;
    overflow: hidden;
  }

  .dashboard-menu ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .dashboard-menu .nav-link {
    display: flex;
    align-items: center;
    padding: 16px 20px;
    color: var(--gray-500);
    text-decoration: none;
    transition: all 0.2s;
    border-left: 3px solid transparent;
    font-weight: 500;
  }

  .dashboard-menu .nav-link i {
    margin-right: 12px;
    font-size: 18px;
    color: var(--gray-400);
    transition: color 0.2s;
  }

  .dashboard-menu .nav-link:hover {
    background-color: var(--gray-100);
    color: var(--primary);
  }

  .dashboard-menu .nav-link:hover i {
    color: var(--primary);
  }

  .dashboard-menu .nav-link.active {
    background-color: rgba(99, 102, 241, 0.1);
    color: var(--primary);
    border-left: 3px solid var(--primary);
  }

  .dashboard-menu .nav-link.active i {
    color: var(--primary);
  }

  /* Content Area */
  .content-area {
    min-width: 0;
  }

  /* Cards */
  .card {
    background-color: white;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    overflow: hidden;
    margin-bottom: 24px;
    border: none;
    transition: transform 0.3s, box-shadow 0.3s;
  }

  .card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
  }

  .card-header {
    background: linear-gradient(135deg, var(--primary), var(--primary-dark));
    color: white;
    padding: 16px 20px;
    font-weight: 600;
    border-bottom: none;
  }

  .card-body {
    padding: 24px;
  }

  /* Profile Card */
  .profile-card {
    text-align: center;
  }

  .profile-avatar {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    background-color: var(--primary);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 36px;
    font-weight: bold;
    margin: 0 auto 20px;
  }

  .profile-info h3 {
    margin-bottom: 16px;
    color: var(--dark);
  }

  .profile-info p {
    color: var(--gray-500);
    margin-bottom: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .profile-info p i {
    margin-right: 8px;
    color: var(--primary);
  }

  /* Forms */
  .form-group {
    margin-bottom: 20px;
  }

  .form-label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: var(--dark);
  }

  .form-control {
    width: 100%;
    padding: 12px 16px;
    border: 1px solid var(--gray-300);
    border-radius: var(--border-radius);
    font-size: 16px;
    transition: border-color 0.2s, box-shadow 0.2s;
  }

  .form-control:focus {
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2);
    outline: none;
  }

  /* Buttons */
  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 10px 20px;
    border-radius: var(--border-radius);
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s;
    border: none;
    text-decoration: none;
  }

  .btn-primary {
    background-color: var(--primary);
    color: white;
  }

  .btn-primary:hover {
    background-color: var(--primary-dark);
    transform: translateY(-2px);
  }

  .btn-danger {
    background-color: var(--danger);
    color: white;
  }

  .btn-danger:hover {
    background-color: #dc2626;
    transform: translateY(-2px);
  }

  .ml-2 {
    margin-left: 8px;
  }

  /* Responsive */
  @media (max-width: 992px) {
    .dashboard-container {
      grid-template-columns: 1fr;
    }

    .dashboard-menu {
      position: static;
      margin-bottom: 24px;
    }
  }

  @media (max-width: 768px) {
    .breadcrumb-wrap {
      padding: 16px 0 0;
    }

    .card-header,
    .card-body {
      padding: 16px;
    }
  }

  @media (max-width: 576px) {
    .dashboard-container {
      padding: 0 12px;
    }
  }
</style>
<div class="dashboard-menu">
  <ul class="nav flex-column">
    <li class="nav-item">
      <a class="nav-link <%= page === 'dashboard' ? 'active' : '' %>" href="/userProfile">
        <i class="fi-rs-marker"></i>Dashboard
      </a>
    </li>
    <li class="nav-item">
      <a class="nav-link <%= page === 'Myaddress' ? 'active' : '' %>" href="/address">
        <i class="fi-rs-marker"></i>My Address
      </a>
    </li>
    <li class="nav-item">
      <a class="nav-link <%= page === 'orders' ? 'active' : '' %>" href="/orders">
        <i class="fi-rs-marker"></i>Orders
      </a>
    </li>
    <li class="nav-item">
      <a class="nav-link <%= page === 'wallet-status' ? 'active' : '' %>" href="/wallet-status">
        <i class="fi-rs-shopping-cart-check"></i>Wallet Status
      </a>
    </li>
    <li class="nav-item">
      <a class="nav-link <%= page === 'wallet-history' ? 'active' : '' %>" href="/wallet-history">
        <i class="fi-rs-shopping-cart-check"></i>Wallet History
      </a>
    </li>
    <li class="nav-item">
      <a class="nav-link <%= page === 'referrals' ? 'active' : '' %>" href="/referrals">
        <i class="fi-rs-shopping-cart-check"></i>Referrals
      </a>
    </li>
    <li class="nav-item">
      <a class="nav-link" href="/logout">
        <i class="fi-rs-sign-out"></i>Logout
      </a>
    </li>
  </ul>
</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  window.onload = function() {
    const addresses = document.querySelectorAll(".address-item");
    console.log('Total address items:', addresses.length); 
};




let currentWalletIndex = 0;
const walletItemsPerPage = 6; 
let walletItems;

window.addEventListener("DOMContentLoaded", function () {
  walletItems = document.querySelectorAll(".wallet-item");
  const prevWalletBtn = document.getElementById("prevWalletBtn");
  const nextWalletBtn = document.getElementById("nextWalletBtn");

  
  prevWalletBtn.addEventListener("click", prevWallet);
  nextWalletBtn.addEventListener("click", nextWallet);

  
  showWalletItems();
});

function showWalletItems() {
  console.log("Showing wallet items from index:", currentWalletIndex);

  
  walletItems.forEach(item => item.style.display = "none");

  
  for (let i = currentWalletIndex; i < currentWalletIndex + walletItemsPerPage && i < walletItems.length; i++) {
    walletItems[i].style.display = "table-row";
  }

 
  document.getElementById("prevWalletBtn").disabled = currentWalletIndex === 0;
  document.getElementById("nextWalletBtn").disabled = currentWalletIndex + walletItemsPerPage >= walletItems.length;

  console.log("PrevWalletBtn Disabled:", currentWalletIndex === 0, "NextWalletBtn Disabled:", currentWalletIndex + walletItemsPerPage >= walletItems.length);
}

function nextWallet() {
  console.log("Next wallet button clicked");
  if (currentWalletIndex + walletItemsPerPage < walletItems.length) {
    currentWalletIndex += walletItemsPerPage;
    showWalletItems();
  }
}

function prevWallet() {
  console.log("Previous wallet button clicked");
  if (currentWalletIndex > 0) {
    currentWalletIndex -= walletItemsPerPage;
    showWalletItems();
  }
}



  let currentIndex = 0;
const itemsPerPage = 4;
let addresses; 

window.addEventListener("DOMContentLoaded", function () {
    addresses = document.querySelectorAll(".address-item");
    const prevBtn = document.getElementById("prevBtn");
    const nextBtn = document.getElementById("nextBtn");


   
    document.getElementById("nextBtn").addEventListener("click", nextAddresses);
    document.getElementById("prevBtn").addEventListener("click", prevAddresses);

   
    showAddresses();
});



function showAddresses() {
       
        
        addresses.forEach(item => item.style.display = "none");

       
        for (let i = currentIndex; i < currentIndex + itemsPerPage && i < addresses.length; i++) {
            addresses[i].style.display = "block";
        }

       
        prevBtn.disabled = currentIndex === 0;
        nextBtn.disabled = currentIndex + itemsPerPage >= addresses.length;

        console.log("PrevBtn Disabled:", prevBtn.disabled, "NextBtn Disabled:", nextBtn.disabled); // Debugging log
    }




function nextAddresses() {

    console.log("Next button clicked"); 
    if (currentIndex + itemsPerPage <= addresses.length) {
      console.log("hai")
        currentIndex += itemsPerPage;
        showAddresses();
    }
}

function prevAddresses() {
    console.log("Previous button clicked"); 
    if (currentIndex > 0) {
        currentIndex -= itemsPerPage;
        showAddresses();
    }
}



let currentOrderIndex = 0;
    const ordersPerPage = 6;
    let orderItems;

    window.addEventListener("DOMContentLoaded", function () {
        orderItems = document.querySelectorAll(".order-item");
        const prevOrderBtn = document.getElementById("prevOrderBtn");
        const nextOrderBtn = document.getElementById("nextOrderBtn");

        prevOrderBtn.addEventListener("click", prevOrders);
        nextOrderBtn.addEventListener("click", nextOrders);

        showOrders();
    });

    function showOrders() {
        console.log("Showing orders from index:", currentOrderIndex);

      
        orderItems.forEach(item => item.style.display = "none");

       
        for (let i = currentOrderIndex; i < currentOrderIndex + ordersPerPage && i < orderItems.length; i++) {
            orderItems[i].style.display = "table-row";
        }

       
        document.getElementById("prevOrderBtn").disabled = currentOrderIndex === 0;
        document.getElementById("nextOrderBtn").disabled = currentOrderIndex + ordersPerPage >= orderItems.length;

        console.log("PrevBtn Disabled:", currentOrderIndex === 0, "NextBtn Disabled:", currentOrderIndex + ordersPerPage >= orderItems.length);
    }

    function nextOrders() {
        console.log("Next button clicked");
        if (currentOrderIndex + ordersPerPage < orderItems.length) {
            currentOrderIndex += ordersPerPage;
            showOrders();
        }
    }

    function prevOrders() {
        console.log("Previous button clicked");
        if (currentOrderIndex > 0) {
            currentOrderIndex -= ordersPerPage;
            showOrders();
        }
    }




document.getElementById('editProfileForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const data = Object.fromEntries(formData.entries());

    
    const nameRegex = /^[A-Za-z\s]+$/;
    const phoneRegex = /^\d{10}$/;
    
    if (!nameRegex.test(data.name)) {
      Swal.fire({
        icon: 'error',
        title: 'Invalid Name',
        text: 'Name should only contain alphabets and spaces!'
      });
      return;
    }

    if (!phoneRegex.test(data.phone)) {
      Swal.fire({
        icon: 'error',
        title: 'Invalid Phone',
        text: 'Phone number must be 10 digits!'
      });
      return;
    }

    try {
      const response = await fetch('/updateUserDetails', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (result.success) {
        Swal.fire({
          icon: 'success',
          title: 'Profile Updated!',
          text: result.message,
        }).then(() => {
          window.location.reload(); 
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Update Failed',
          text: result.message || 'Failed to update profile!',
        });
      }
    } catch (error) {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'An error occurred. Please try again!',
      });
    }
  });


  document.getElementById('orderSearch').addEventListener('keyup', function () {
  let filter = this.value.toLowerCase();
  let rows = document.querySelectorAll("#orderTable tbody tr");

  rows.forEach(row => {
    const cells = row.querySelectorAll('td');
    const orderId = cells[0].textContent.toLowerCase();
    const date = cells[1].textContent.toLowerCase();
    const amount = cells[2].textContent.toLowerCase();
    const status = cells[3].textContent.toLowerCase();
    
    const match = orderId.includes(filter) || 
                  date.includes(filter) || 
                  amount.includes(filter) || 
                  status.includes(filter);

    row.style.display = match ? "" : "none";
  });
});


document.getElementById('addMoneyForm')?.addEventListener('submit', async (e) => {
  e.preventDefault();

  const amount = document.getElementById('amount').value;
  const paymentMethod = document.getElementById('paymentMethod').value;

  if (!amount || amount < 100) {
    Swal.fire('Error', 'Minimum amount is ₹100', 'error');
    return;
  }

  try {
    const response = await fetch('/create-razorpay-order', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        amount: amount * 100, 
        walletTopup: true,
      }),
      credentials: 'include',
    });

    const order = await response.json();

    if (!order.key_id || !order.order_id) {
      throw new Error('Invalid response from server');
    }

    const options = {
      key: order.key_id, 
      amount: order.amount,
      currency: 'INR',
      name: 'Your Store Name',
      description: 'Wallet Top-up',
      order_id: order.order_id,
      handler: async function (response) {
        try {
          const verification = await fetch('/verify-payment', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              payment_id: response.razorpay_payment_id,
              order_id: response.razorpay_order_id,
              signature: response.razorpay_signature,
              amount: amount,
              walletTopup: true,
            }),
            credentials: 'include',
          });

          const result = await verification.json();

          if (result.success) {
            Swal.fire('Success', 'Wallet top-up successful!', 'success').then(() => {
              window.location.reload();
            });
          } else {
            Swal.fire('Error', result.message, 'error');
          }
        } catch (error) {
          Swal.fire('Error', 'Payment verification failed', 'error');
        }
      },
      prefill: {
        name: '<%= user.name %>',
        email: '<%= user.email %>',
        contact: '<%= user.phone %>',
      },
      theme: { color: '#4361ee' },
    };

    const rzp = new Razorpay(options);
    rzp.open();
  } catch (error) {
    console.error('Payment Initialization Error:', error);
    Swal.fire('Error', 'Payment failed to initialize: ' + error.message, 'error');
  }
});

  function editProfile() {
    const dashboard = document.getElementById('dashboard');
    dashboard.style.display = "none";

    const editProfile = document.getElementById('editProfile');
    editProfile.style.display = "block";
  }

  function cancelEdit() {
    document.getElementById("editProfile").style.display = "none";
    document.getElementById("dashboard").style.display = "block";
  }


  function confirmDelete(addressId) {
    Swal.fire({
      title: 'Are you sure?',
      text: 'You are about to delete this address. This action cannot be undone!',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#3085d6',
      confirmButtonText: 'Yes, delete it!',
      cancelButtonText: 'Cancel',
    }).then((result) => {
      if (result.isConfirmed) {
       
        window.location.href = `/deleteAddress?id=${addressId}`;
      }
    });
  }



  



  // document.querySelectorAll('.nav-link').forEach(tab => {
  //   tab.addEventListener('click', (event) => {
      
  //     event.preventDefault();

  //     console.log('tabs: ', tab);


  //     document.getElementById('editProfile').style.display = 'none';

      

  //     document.querySelectorAll('.tab-pane').forEach(tabPane => {
  //       tabPane.style.display = 'none';
  //     });

      
  //     const targetTab = event.target.getAttribute('href'); 
  //     document.querySelector(targetTab).style.display = 'block';

  //     document.querySelectorAll('.nav-link').forEach(link => {
  //       link.classList.remove('active');
  //     });

  //     event.target.classList.add('active');
  //   });
  // });

</script>



